# env vars
VAGRANTFILE_API_VERSION = "2"
VAGRANT_DISABLE_VBOXSYMLINKCREATE = "1"

#var init
repo1_disk1 = './repo1_disk1'
proxy1_disk1 = './proxy1_disk1'
web1_disk1 = './web1_disk1'
web2_disk1 = './web2_disk1'
mysql_disk1 = './mysql_disk1'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
config.ssh.insert_key = false
config.vm.box_check_update = false

# repo1
config.vm.define "repo1" do |repo1|
  
  repo1.vm.box = "rdbreak/rhel8node"    
  repo1.vm.provider "virtualbox" do |repo1|
    repo1.memory = "512"
    unless File.exist?(repo1_disk1)
      repo1.customize ['createhd', '--filename', repo1_disk1, '--variant', 'Standard', '--size', 2 * 1024]
      repo1.customize ['storagectl', :id, '--name', 'SATA Controller', '--add', 'sata', '--portcount', 1]
      repo1.customize ['storageattach', :id,  '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', repo1_disk1]       
    end      
  end
  repo1.vm.provision :shell, :inline => "pvs | grep '/dev/sdb' && echo 'The disk was already expanded!' || (pvcreate /dev/sdb; vgextend rhel_rhel8 /dev/sdb; lvextend -l +100%FREE /dev/rhel_rhel8/root; xfs_growfs /dev/rhel_rhel8/root)"
  repo1.vm.provision :shell, :inline => "sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config; sudo systemctl restart sshd;", run: "always"
  repo1.vm.provision :shell, :inline => "yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm -y; sudo yum install -y sshpass python3-pip python3-devel httpd sshpass vsftpd createrepo1", run: "always"
  repo1.vm.provision :shell, :inline => " python3 -m pip install -U pip ; python3 -m pip install pexpect; python3 -m pip install ansible", run: "always"
  repo1.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: ".git/"
  repo1.vm.network "private_network", ip: "192.168.55.199"
end


# control
config.vm.define "control" do |control|
  control.vm.box = "rdbreak/rhel8node"
  control.vm.network "private_network", ip: "192.168.55.200"
  control.vm.provider :virtualbox do |control|
    control.customize ['modifyvm', :id,'--memory', '2048']
    end
  control.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: [".git/", "*.vdi"]
  control.vm.provision :ansible_local do |ansible|
  ansible.playbook = "/vagrant/playbooks/main.yml"
  ansible.install = false
  ansible.compatibility_mode = "2.0"
  ansible.inventory_path = "/vagrant/inventory"
  ansible.config_file = "/vagrant/ansible.cfg"
  ansible.limit = "all"
 end
end


# proxy1
config.vm.define "proxy1" do |proxy1|
  proxy1.vm.box = "rdbreak/rhel8node"
  proxy1.vm.network "private_network", ip: "192.168.55.201"
  proxy1.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: [".git/", "*.vdi"]
  proxy1.vm.provider "virtualbox" do |proxy1|
    proxy1.memory = "512"
    
    unless File.exist?(proxy1_disk1)
      proxy1.customize ['createhd', '--filename', proxy1_disk1, '--variant', 'Fixed', '--size', 2 * 1024]
      proxy1.customize ['storagectl', :id, '--name', 'SATA Controller', '--add', 'sata', '--portcount', 2]
      proxy1.customize ['storageattach', :id,  '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', proxy1_disk1]
    end
  end
  
  proxy1.vm.provision "shell", inline: <<-SHELL
  yes| sudo mkfs.ext4 /dev/sdb
  SHELL
  proxy1.vm.synced_folder ".", "/vagrant"
end


# web1
config.vm.define "web1" do |web1|
  web1.vm.box = "rdbreak/rhel8node"
  web1.vm.network "private_network", ip: "192.168.55.202"
  web1.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: [".git/", "*.vdi"]
  web1.vm.provider "virtualbox" do |web1|
    web1.memory = "512"

    unless File.exist?(web1_disk1)
      web1.customize ['createhd', '--filename', web1_disk1, '--variant', 'Fixed', '--size', 2 * 1024]
      web1.customize ['storagectl', :id, '--name', 'SATA Controller', '--add', 'sata', '--portcount', 2]
      web1.customize ['storageattach', :id,  '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', web1_disk1]
      end
 end
 
    web1.vm.provision "shell", inline: <<-SHELL
    yes| sudo mkfs.ext4 /dev/sdb
    SHELL
    web1.vm.synced_folder ".", "/vagrant"
end


# web2
config.vm.define "web2" do |web2|
  web2.vm.box = "rdbreak/rhel8node"
  web2.vm.network "private_network", ip: "192.168.55.203"
  web2.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: [".git/", "*.vdi"]
  web2.vm.provider "virtualbox" do |web2|
    web2.memory = "512"

   unless File.exist?(web2_disk1)
      web2.customize ['createhd', '--filename', web2_disk1, '--variant', 'Fixed', '--size', 2 * 1024]
      web2.customize ['storagectl', :id, '--name', 'SATA Controller', '--add', 'sata', '--portcount', 2]
      web2.customize ['storageattach', :id,  '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', web2_disk1]
      end
  end
  
    web2.vm.provision "shell", inline: <<-SHELL
    yes| sudo mkfs.ext4 /dev/sdb
    SHELL
    web2.vm.synced_folder ".", "/vagrant"
end


# mysql1
config.vm.define "mysql1" do |mysql1|
  mysql1.vm.box = "rdbreak/rhel8node"
  mysql1.vm.network "private_network", ip: "192.168.55.204"
  mysql1.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: [".git/", "*.vdi"]
  mysql1.vm.provider "virtualbox" do |mysql1|
    mysql1.memory = "512"

    unless File.exist?(mysql_disk1)
      mysql1.customize ['createhd', '--filename', mysql_disk1, '--variant', 'Fixed', '--size', 2 * 1024]
      mysql1.customize ['storagectl', :id, '--name', 'SATA Controller', '--add', 'sata', '--portcount', 2]
      mysql1.customize ['storageattach', :id,  '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', mysql_disk1]
      end
  end
  
    mysql1.vm.provision "shell", inline: <<-SHELL
    yes| sudo mkfs.ext4 /dev/sdb
    SHELL
    mysql1.vm.synced_folder ".", "/vagrant"
end



end
